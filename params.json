{"name":"Passwd","tagline":"Password utilities.","body":"## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n```ruby\r\ngem 'passwd'\r\n```\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install passwd\r\n\r\n## Usage\r\n\r\n```ruby\r\nrequire 'passwd'\r\n```\r\n\r\n### Create random password\r\n\r\n```ruby\r\npassword = Passwd.create\r\n```\r\n\r\n### Hashing password\r\n\r\nHashing with SHA1.\r\n\r\n```ruby\r\npassword_hash = Passwd.hashing(password)\r\n```\r\n\r\n### Password settings\r\n\r\nDefault config is stored in the class variable. (@@config)\r\nChanging the default configs are as follows:\r\n\r\n```ruby\r\nPasswd.config => Get config hash.\r\nPasswd.config(length: 10) => Change to the default length.\r\n```\r\n\r\nOptions that can be specified:\r\n\r\n* :length => Number of characters. default is 8.\r\n* :lower => Skip lower case if set false. default is true.\r\n* :upper => Skip upper case if set false. default is true.\r\n* :number => Skip numbers if set false. default is true.\r\n* :letters_lower => Define an array of lower case. default is (\"a\"..\"z\").to_a\r\n* :letters_upper => Define an array of upper case. default is (\"A\"..\"Z\").to_a\r\n* :letters_number => Define an array of numbers. default is (\"0\"..\"9\").to_a\r\n\r\n### Password object\r\n\r\nDefault password is randomly generated.\r\nDefault salt is \"#{Time.now.to_s}\".\r\n\r\n```ruby\r\npassword = Passwd::Password.new\r\npassword.text # return text password.\r\npassword.salt_text # return text salt.\r\npassword.salt_hash # return hash salt.\r\npassword.hash # return hash password.\r\n```\r\n\r\nOptions that can be specified:\r\n\r\n* :password => Text password. default is random.\r\n* :salt_text => Text salt. default is #{Time.now.to_s}.\r\n\r\nPassword authenticate:\r\n\r\n```ruby\r\npassword = Passwd::Password.new\r\nPasswd.auth(password.text, password.salt_hash, password.hash) # => true\r\nPasswd.auth(\"invalid!!\", password.salt_hash, password.hash) # => false\r\n\r\npassword == password.text # => true\r\npassword == \"invalid!!\" # => false\r\n```\r\n\r\n## For ActiveRecord User model\r\n\r\nmodel:\r\n\r\n```ruby\r\nclass User < ActiveRecord::Base\r\n  include Passwd::ActiveRecord\r\n  # if not specified arguments for define_column => {id: :email, salt: :salt, password: :password}\r\n  define_column id: :id_colname, salt: :salt_colname, password: :password_colname\r\n\r\n  ...\r\nend\r\n```\r\n\r\nAuthentication:\r\n\r\n```ruby\r\nuser = User.authenticate(\"foo@example.com\", \"secret\") # => return user object or nil.\r\n\r\nif user\r\n  puts \"Hello #{user.name}!\"\r\nelse\r\n  puts \"Authentication failed\"\r\nend\r\n```\r\n\r\n```ruby\r\nuser = User.find(params[:id])\r\nif user.authenticate(\"secret\") # => return true or false\r\n  puts \"Authentication is successful!\"\r\nelse\r\n  puts \"Authentication failed!\"\r\nend\r\n```\r\n\r\nChange passowrd:\r\n\r\n```ruby\r\nuser = User.find(params[:id])\r\n# set random password. (salt also set if salt is nil)\r\n# return set password text.\r\n# set specified password if specified argument.\r\n#   user.set_password(\"secret\")\r\npassword_text = user.set_password\r\n\r\nif user.save\r\n  NoticeMailer.change_mail(user, password_text).deliver\r\nend\r\n```\r\n\r\n```ruby\r\nuser.find(params[:id])\r\nif user.update_password(old_pass, new_pass) # => return new password(text) or false\r\n  if user.save\r\n    NoticeMailer.change_mail(user, password_text).deliver\r\n  end\r\nelse\r\n  puts \"Authentication failed!\"\r\nend\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}